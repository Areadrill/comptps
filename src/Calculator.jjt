options
{
 LOOKAHEAD=2;
}
PARSER_BEGIN(Calculator)
import java.util.Hashtable;
public class Calculator
{
  public static Hashtable symbolTable = new Hashtable();
  int cnt = 1;
  
 public static void main(String args[]) throws ParseException {
	Calculator myCalc = new Calculator(System.in);

	
	
	SimpleNode root = myCalc.Program(); // devolve referência para o nó raiz da árvore

	root.dump(""); // imprime no ecrã a árvore
	myCalc.eval(root);//System.out.println("Valor da expressão: "+myCalc.eval(root));
 }
int eval(SimpleNode node) {
	//node.dump(Integer.toString(node.id));
	if(node.id == CalculatorTreeConstants.JJTPROGRAM)
	{
	  int acum = 0;
		for(int i = 0; i < node.jjtGetNumChildren(); i++)
		{
			eval((SimpleNode)node.jjtGetChild(i));
		  
		}
		return 0;
	}
	
  
	if(node.jjtGetNumChildren() == 0) // leaf node with integer value
		return node.val;
	else if(node.jjtGetNumChildren() == 1)	{
	  
	  return this.eval((SimpleNode) node.jjtGetChild(0));	} // only one child
		

	
	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
	SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
	
	switch(node.id) {
		case CalculatorTreeConstants.JJTADD : int res= ( eval( lhs ) + eval( rhs )); System.out.println("Valor da expressão " + cnt++ + ": " + res); return res;
		case CalculatorTreeConstants.JJTSUB : res= ( eval( lhs ) - eval( rhs )); System.out.println("Valor da expressão " + cnt++ + ": " + res); return res;
		case CalculatorTreeConstants.JJTMUL : res= ( eval( lhs ) * eval( rhs )); System.out.println("Valor da expressão " + cnt++ + ": " + res); return res;
		case CalculatorTreeConstants.JJTDIV : res= ( eval( lhs ) / eval( rhs )); System.out.println("Valor da expressão " + cnt++ + ": " + res); return res;
		case CalculatorTreeConstants.JJTASSIGNMENT: return 0;
		 
		default : // abort
			System.out.println("Operador ilegal!");
			System.exit(1);
	}
	return 0;
}
} 

PARSER_END(Calculator)
SKIP :
{
" " | "\r" | "\t"
}
TOKEN:
{
 < INTEGER: (["0"-"9"])+ >
| < LF: "\n" >
| < SEPARATOR: ";" >
| < VARIABLE: (["A"-"Z"]|["a"-"z"] (["0"-"9"]|["A"-"Z"]["a"-"z"])*) >
| < FIN: "." >
}

SimpleNode Program(): {}
{	((Assignment() | Expr1(1)) < SEPARATOR > (<LF >)*)+ < FIN >	{	  return jjtThis;
	}
}
SimpleNode Assignment(): { Token t1, t2;}
{
 t1 = < VARIABLE > "=" t2 = < INTEGER > {symbolTable.put(t1.image, Integer.parseInt(t2.image)); jjtThis.val = 0; return jjtThis;}}
SimpleNode Expression(): {}
{
 Expr1(1) < LF >{return jjtThis;} // código Java entre chavetas
}
void Expr1(int sign) #void: {}
{
 Expr2(sign) [("+" Expr2(sign) #Add(2)| "-" Expr2(sign) #Sub(2))]
}	

void Expr2(int sign) #void: {}
{
 Expr3(sign) [("*" Expr3(1) #Mul(2) | "/" Expr3(1) #Div(2))]
 }
void Expr3(int sign) #void: {}
{
  "-" Expr4(-1*sign)
 | Expr4(sign)
}
void Expr4(int sign) #void : {Token t;}
{
  t = <INTEGER>
 {
   jjtThis.val = Integer.parseInt(t.image) * sign;
 } #Term
 | t = < VARIABLE >
 {
   jjtThis.val = ((int)symbolTable.get(t.image))*sign;
 } #Term
| "(" Expr1(sign) ")"}

